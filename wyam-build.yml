# Wyam build pipeline
# Publishes content produced by Wyam to an Artifact named 'content'
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
 branches:
    include:
    - master
pr: none

variables:
  - group: blog

pool:
  vmImage: 'windows-latest'

stages:
- stage: Build
  jobs:
  - job: wyam
    steps:
    - pwsh: dotnet tool install -g Wyam.Tool
      displayName: 'install wyam global tool'

    - pwsh: pwsh -C $env:USERPROFILE\.dotnet\tools\wyam build -o $(Build.ArtifactStagingDirectory)\content
      displayName: 'build site'
    - pwsh: ls -l .
      displayName: 'list cwd'
    - pwsh: ls -l $(Build.ArtifactStagingDirectory)
      displayName: 'list stage'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\content\'
        ArtifactName: 'content'
        publishLocation: 'Container'

- stage: Deploy
  jobs:
  - job: CopyBlob
    steps:
    - download: current
      artifact: content
    - task: AzureFileCopy@3
      displayName: copy
      inputs:
        sourcePath: $(Pipeline.Workspace)/content
        azureSubscription: michael-azure
        destination: azureBlob
        storage: $(StorageAccountName)
        containerName: $(StorageContainer)
        cleanTargetBeforeCopy: true
    - task: AzureCLI@2
      displayName: set-cache-control
      inputs:
        azureSubscription: 'michael-azure'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $containerName = "$web";
          
          # Blob Update Settings
          $contentCacheControl = "max-age=31536000"; # 1 year, lighthouse recommended
          $extensions = @(".gif", ".jpg", ".jpeg", ".ico", ".png", ".css", ".js", ".ttf", ".eot", ".svg", ".woff",".woff2");
          
          # Read all blobs
          $blobs = az storage blob list --account-name $env:StorageAccountName --container-name $env:StorageContainer --num-results * --output json | ConvertFrom-Json
          
          # iterate all blobs
          foreach($blob in $blobs)
          {
              # use name as identifier
              $blobName = $blob.name;
          
              # get extension
              $extension = [System.IO.Path]::GetExtension($blobName).ToLower();
           
              # update blob if extension is affected
              if($extensions.Contains($extension))
              {
                  az storage blob update  --account-name $env:StorageAccountName --container-name $env:StorageContainer --name $blobName --content-cache-control $contentCacheControl
                  Write-Host "Updated $blobName" 
              }
          }
    - task: AzureCLI@2
      displayName: purge front door
      inputs:
        azureSubscription: 'michael-azure'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: 'az network front-door purge-endpoint --content-paths "/*" --name $env:FrontDoorName --resource-group $env:ResourceGroupName'
              